
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Convert Your SQL Server Tables to Entity Framework Data Models</title>
    <meta name="description" content="Quick and easy conversion of SQL Server table schema to Microsoft's MVC Entity Framework data model.  Create the class to represent the database table using SSMS (SQL Server Management Studio.)" />
    <link rel="icon" type="image/x-icon" href="favicon.ico" />
    <link href="http://fonts.googleapis.com/css?family=Orbitron:400,900|Open+Sans:400,700" rel="stylesheet" type="text/css" />
    <link href="//netdna.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap.min.css" rel="stylesheet" type="text/css" media="screen" />
    <link href="//netdna.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.css" rel="stylesheet" />
    <style>
        body { padding-top: 50px; padding-bottom: 20px; font-family: 'Open Sans', sans-serif; }

        .navbar-inverse { background-color: #449d44; }

        .navbar-inverse, .navbar-brand, .navbar-brand a:link, .navbar-brand a:visited { color: #fff; }

            .navbar-brand a:hover { text-decoration: none; }

        .navbar-brand { font-size: 1.3em; font-weight: bold; text-shadow: 1px 2px 3px #222; }

        .h1 { font-size: 1.5em; font-weight: bold; }

        .jumbotron { background-color: #eef3ee; }

        footer { background-color: #449d44; color: #fff; font-size: 0.9em; padding: 15px 15px 5px 15px; text-align: right; }
    </style>
</head>
<body>
    <div class="navbar navbar-inverse navbar-fixed-top">
        <div class="container">
            <div class="navbar-header">
                <div class="navbar-brand"><a href="http://SQL2EF.com"><i class="fa fa-database"></i>&nbsp;SQL to Entity Framework</a></div>
            </div>
        </div>
    </div>
    <div class="body-content">
        <div class="container">
            <div class="row">
                <div class="col-sm-12">
                    <h1>SQL Server Tables to Entity Framework Data Models!</h1>
                    <div class="jumbotron">
                        <p>
                            Using SQL Server Management Studio (SSMS) right-click on the table you want to convert.
                            Next click 'Script Table as', 'Create To' and then 'Clipboard'.
                            Now you can paste the SQL command below and hit 'Convert' to get your data model.  It's that easy!
                        </p>
                        <textarea id="tb" rows="30" class="form-control" style="width: 100%; height: 400px;"></textarea>
                        <div class="checkbox">
                            <label>
                                <input type="checkbox" id="ml" checked="checked" />
                                Include MaxLength annotations.
                            </label>
                        </div>
                        <p class="text-right">
                            <button id="btn-clear" class="btn btn-success"><i class="fa fa-eraser"></i>&nbsp;Clear</button>
                            <button id="btn-convert" class="btn btn-success"><i class="fa fa-database"></i>&nbsp;Convert</button>
                        </p>
                    </div>
                </div>
            </div>
        </div>

        <footer>
            <p>&copy; 2015 SQL2EF</p>
        </footer>
    </div>
    <script src="//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>
    <script src="//netdna.bootstrapcdn.com/bootstrap/3.3.2/js/bootstrap.min.js"></script>

    <script type="text/javascript">
		$(document).ready(function () {
			(function ($, window) {
				var fieldDef = function (r) {
					var s = this;
					s.isKey = r.isKey;
					s.DataType = r.DataType;
					s.FieldName = r.FieldName;
					s.Nullable = r.Nullable;
					s.MaxLength = r.MaxLength;
				};

				function stringAfter(sText, sAfter) {
				    if (!sText)
				        sText = '';

				    if (sText.toLowerCase().indexOf(sAfter.toLowerCase()) > -1) {
						var i = sText.toLowerCase().indexOf(sAfter.toLowerCase()) + sAfter.length;
						return sText.substring(i);
					}
					return sText;
				}

				function stringBefore(sText, sBefore) {
					if (sText.toLowerCase().indexOf(sBefore.toLowerCase()) > -1) {
						var i = sText.toLowerCase().indexOf(sBefore.toLowerCase());
						return sText.substring(0, i);
					}
					return sText;
				};

				function getDataType(sText) {
					if (sText.toLowerCase().indexOf("[bigint]") > -1)
						return "Int64";

					if (sText.toLowerCase().indexOf("binary]") > -1)
						return "Byte[]";

					if (sText.toLowerCase().indexOf("[bit]") > -1)
						return "Boolean";

					if (sText.toLowerCase().indexOf("[char]") > -1)
						return "string";

					if (sText.toLowerCase().indexOf("[nchar]") > -1)
						return "string";

					if (sText.toLowerCase().indexOf("[date]") > -1)
						return "DateTime";

					if (sText.toLowerCase().indexOf("[datetime]") > -1)
						return "DateTime";

					if (sText.toLowerCase().indexOf("[datetime2]") > -1)
						return "DateTime";

					if (sText.toLowerCase().indexOf("[decimal]") > -1)
						return "Decimal";

					if (sText.toLowerCase().indexOf("[float]") > -1)
						return "Double";

					if (sText.toLowerCase().indexOf("[float]") > -1)
						return "Double";

					if (sText.toLowerCase().indexOf("[int]") > -1)
						return "int";

					if (sText.toLowerCase().indexOf("[money]") > -1)
						return "Decimal";

					if (sText.toLowerCase().indexOf("[numeric]") > -1)
						return "Decimal";

					if (sText.toLowerCase().indexOf("[real]") > -1)
						return "Single";

					if (sText.toLowerCase().indexOf("[smallint]") > -1)
						return "Int16";

					if (sText.toLowerCase().indexOf("[smallmoney]") > -1)
						return "Decimal";

					if (sText.toLowerCase().indexOf("[sql_variant]") > -1)
						return "Object";

					if (sText.toLowerCase().indexOf("[time]") > -1)
						return "TimeSpan";

					if (sText.toLowerCase().indexOf("[tinyint]") > -1)
						return "Byte";

					if (sText.toLowerCase().indexOf("[uniqueidentifier]") > -1)
						return "Guid";

					if (sText.toLowerCase().indexOf("[varbinary]") > -1)
						return "Byte[]";

					if (sText.toLowerCase().indexOf("[varchar]") > -1)
						return "string";

					if (sText.toLowerCase().indexOf("[nvarchar]") > -1)
						return "string";

					if (sText.toLowerCase().indexOf("[text]") > -1)
						return "string";

					if (sText.toLowerCase().indexOf("[ntext]") > -1)
						return "string";

					return "Unknown";
				};

				function getMaxLength(sText) {
					var guess = stringBefore(stringAfter(sText, "]("), ")");

					if ($.isNumeric(guess)) {
						var dtype = getDataType(sText);

						if (dtype == "string" && sText.toLowerCase().indexOf("(max)") == -1) {
							return "\t\t[MaxLength(" + guess + ")]\r\n";
						}
					}
					return "";
				}

				function isKey(sText) {
					// Not used yet.
					return false;
				};

				function isNullable(sText) {
					var dtype = getDataType(sText);

					if (dtype == "string")
						return false;

					return (sText.toLowerCase().indexOf("not null") == -1);
				};

				function endsIn(sText, sEndingText) {
					var thisText = sText.substring(sText.length - sEndingText.length);

					if (thisText.toLowerCase() == sEndingText.toLowerCase())
						return true;
					else
						return false;
				};

				function setNullable(dataType, nullable) {
					if (nullable) {
						return "Nullable<" + dataType + ">";
					} else {
						return dataType;
					}
				};

				function SQL2EF(sql, withAnnotations) {
				    var className = stringBefore(stringAfter(sql, "CREATE TABLE [dbo].["), "](");
				    var fieldText = stringBefore(stringBefore(stringAfter(sql, "]("), "GO"), "constraint");
				    var fields = fieldText.split("\n");
				    var fieldObjs = [];

				    $.each(fields, function (i, f) {
				        var dataType = getDataType(f);

				        if (dataType != "Unknown") {

				            var field = new fieldDef({
				                isKey: isKey(f),
				                FieldName: stringBefore(stringAfter(f, "["), "]"),
				                Nullable: isNullable(f),
				                DataType: getDataType(f),
				                MaxLength: getMaxLength(f)
				            });

				            fieldObjs.push(field);
				        }
				    });

				    var sb = "\tpublic class " + className + " {\r\n";

				    $.each(fieldObjs, function (i, f) {
				        if (withAnnotations)
				            sb += f.MaxLength + "\t\tpublic " + setNullable(f.DataType, f.Nullable) + " " + f.FieldName + " { get; set; }\r\n";
				        else
				            sb += "\t\tpublic " + setNullable(f.DataType, f.Nullable) + " " + f.FieldName + " { get; set; }\r\n";
				    });

				    sb += "\t}\r\n";

				    return sb;
				};

				$('#btn-clear').on('click', function () { $('#tb').val(''); });
				$('#btn-convert').on('click', function () {
				    var sqlval = $('#tb').val();
				    var maxlen = $('#ml').prop('checked');

				    $('#tb').val(SQL2EF(sqlval, maxlen));
				});

    		})($, this);
		});
    </script>

    <a href="https://github.com/dataguy/SQL2EF">
        <img style="position: absolute; top: 50px; right: 0; border: 0;" src="https://camo.githubusercontent.com/e7bbb0521b397edbd5fe43e7f760759336b5e05f/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f677265656e5f3030373230302e706e67" alt="Fork me on GitHub" data-canonical-src="https://s3.amazonaws.com/github/ribbons/forkme_right_green_007200.png" />
    </a>

</body>
</html>
